/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* top =  1  *)
(* src = "../src/alu.v:1" *)
module alu(clk, A, B, sel, Y, Cout);
  (* src = "../src/alu.v:8" *)
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  (* src = "../src/alu.v:3" *)
  input [3:0] A;
  (* src = "../src/alu.v:3" *)
  input [3:0] B;
  (* src = "../src/alu.v:6" *)
  output Cout;
  (* src = "../src/alu.v:5" *)
  output [3:0] Y;
  (* src = "../src/alu.v:2" *)
  input clk;
  (* src = "../src/alu.v:4" *)
  input [1:0] sel;
  assign _002_ = A[0] ^ B[0];
  assign _003_ = ~(sel[1] | sel[0]);
  assign _004_ = sel[1] | ~(sel[0]);
  assign _005_ = sel[1] & sel[0];
  assign _006_ = sel[1] & ~(sel[0]);
  assign _007_ = A[0] | B[0];
  assign _008_ = A[0] & B[0];
  assign _009_ = ~((_008_ & _006_) | (_007_ & _005_));
  assign _010_ = _008_ | ~(_007_);
  assign _011_ = ~((_010_ | _004_) & _009_);
  assign Y[0] = _003_ ? _002_ : _011_;
  assign _012_ = ~(A[1] ^ B[1]);
  assign _013_ = ~(_012_ ^ _008_);
  assign _014_ = A[1] | B[1];
  assign _015_ = A[1] & B[1];
  assign _016_ = ~((_015_ & _006_) | (_014_ & _005_));
  assign _017_ = A[1] ^ B[1];
  assign _018_ = B[0] & ~(A[0]);
  assign _019_ = ~(_018_ ^ _017_);
  assign _020_ = ~((_019_ | _004_) & _016_);
  assign Y[1] = _003_ ? _013_ : _020_;
  assign _021_ = ~(A[2] ^ B[2]);
  assign _022_ = _008_ & ~(_012_);
  assign _023_ = ~(_022_ | _015_);
  assign _024_ = _023_ ^ _021_;
  assign _025_ = A[2] | B[2];
  assign _026_ = A[2] & B[2];
  assign _027_ = ~((_026_ & _006_) | (_025_ & _005_));
  assign _028_ = _026_ | ~(_025_);
  assign _029_ = B[1] | ~(A[1]);
  assign _030_ = ~((_018_ | _017_) & _029_);
  assign _031_ = ~(_030_ ^ _028_);
  assign _032_ = ~((_031_ | _004_) & _027_);
  assign Y[2] = _003_ ? _024_ : _032_;
  assign _033_ = ~(A[3] ^ B[3]);
  assign _034_ = ~_021_;
  assign _035_ = _022_ | _015_;
  assign _036_ = ~((_035_ & _034_) | _026_);
  assign _037_ = _036_ ^ _033_;
  assign _038_ = A[3] | B[3];
  assign _039_ = A[3] & B[3];
  assign _040_ = ~((_039_ & _006_) | (_038_ & _005_));
  assign _041_ = _038_ & ~(_039_);
  assign _042_ = A[2] & ~(B[2]);
  assign _043_ = ~((_030_ & _028_) | _042_);
  assign _044_ = ~(_043_ ^ _041_);
  assign _045_ = ~((_044_ | _004_) & _040_);
  assign Y[3] = _003_ ? _037_ : _045_;
  assign _046_ = A[3] & ~(B[3]);
  assign _047_ = _042_ & ~(_041_);
  assign _048_ = _047_ | _046_;
  assign _049_ = _028_ & ~(_041_);
  assign _050_ = ~((_049_ & _030_) | _048_);
  assign _051_ = _026_ & ~(_033_);
  assign _052_ = ~(_051_ | _039_);
  assign _053_ = _033_ | _021_;
  assign _054_ = ~((_053_ | _023_) & _052_);
  assign _000_ = _004_ ? _054_ : _050_;
  assign _001_ = ~(_006_ | _005_);
  (* src = "../src/alu.v:8" *)
  \$_DLATCH_P_  _114_ (
    .D(_000_),
    .E(_001_),
    .Q(Cout)
  );
endmodule
